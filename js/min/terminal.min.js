class Terminal{#e;#t=[];help='\n        <div>\n            <pre>\n<span class="token comment">-----------------------------</span>\n    <span class="class-name token">Commands:</span>\n        - window [add | remove] [:int]\n            usage:\n                window add 3\n        \n        - terminal [close | open]\n            usage:\n                terminal close\n        \n        - terminal [color | bg] [set | get | reset] [:hex | :rgb | :hsl]    (not implemented)\n            usage:\n                terminal color set #fff\n        \n        - config [set | get | reset]\n            usage:\n                config get\n\n        - font [set | get | reset] [:int]\n            usage:\n                font set +3\n\n        - theme [set | get | reset | list] [:string]\n            usage:\n                theme set dark\n\n        - cls\n    \n        - exit\n    \n        - help\n    \n    <span class="class-name token">More info:</span>\n        <a href="https://github.com/ZhengLinLei/paste-code">https://github.com/ZhengLinLei/paste-code</a>\n    \n    <span class="class-name token">Issues:</span>\n        <a href="https://github.com/ZhengLinLei/paste-code/issues">https://github.com/ZhengLinLei/paste-code/issues</a>\n    \n    <span class="class-name token">Author:</span>\n        <a href="https://github.com/ZhengLinLei">Zheng Lin Lei</a>\n<span class="token comment">-----------------------------</span>\n            </pre>\n        </div>\n    ';constructor(e){this.#e=e}commands={window:["add","remove"],terminal:["close","open"],cls:0,exit:0,help:0,config:["set","get","reset"],font:["set","get","reset"],theme:["set","get","reset","list"]};exec=e=>new Promise((t=>{let n=e.split(" ");this.#t.push(e),Object.keys(this.commands).includes(n[0])&&((0==this.commands[n[0]]||this.commands[n[0]].includes(n[1]))&&t(this.execution[n[0]](n)),t([0,`Path "${n[1]}" not found`])),t([0,`Command "${n[0]}" not found`])}));execution={terminal:e=>(this.#e.terminal.toggleFnc(e[1]),[1,""]),window:e=>{let t=0;if(e.length>2){if(!parseInt(e[2]))return[0,`Invalid argument ${e[2]}`];t=parseInt(e[2])}else t=1;for(let n=0;n<t;n++)"add"==e[1]?this.#e.window.add():this.#e.window.remove();return[1,""]},exit:()=>(this.#e.terminal.toggleFnc("close"),[1,""]),cls:()=>(this.#e.terminal.output.innerHTML="",this.#e.terminal.caret.style.transform="translateX(0px)",this.#e.terminal.config.position=0,[1,""]),help:()=>[1,this.help],config:e=>{let t={},n=[1,'\n                <div>\n                    <span>Reload required <a href="javascript:location.reload()">[yes]</a><a>[no]</a</span>\n                </div>\n                '];switch(e[1]){case"set":t=JSON.parse(e.slice(2).join("")),Object.entries(t).forEach((([e,t])=>{"undefined"!==t&&"null"!==t&&"NaN"!==t||(n=[0,`Invalid value ${t}`]),"default"!=t?localStorage.setItem(e,t):localStorage.removeItem(e)}));break;case"get":t={terminal:localStorage.getItem("terminal")||!1,terminalHeight:localStorage.getItem("terminalHeight")||"default",terminalOptWidth:localStorage.getItem("terminalOptWidth")||"default",fontSize:localStorage.getItem("fontSize")||"default",theme:localStorage.getItem("theme")||"default"},n=[1,`\n                        <div>\n                            <pre><code class="language-json">${Prism.highlight(JSON.stringify(t,null,4).trim(),Prism.languages.json,"json")}</code></pre>\n                        </div>\n                        <div>\n                            <span>config set ${JSON.stringify(t)}</span>\n                        </div>\n                        `];break;case"reset":localStorage.clear()}return n},font:e=>{let t=[1,""],n=document.documentElement||document.querySelector(":root"),s=parseInt(window.getComputedStyle(n,null).getPropertyValue("font-size").replace("px",""));switch(e[1]){case"set":if(e[2].match(/[-+]/)){s=s+parseInt(e[2])}else s=parseInt(e[2]);break;case"get":t=[1,`<div><span>Font size: <span class="token comment">${s}px</span></span></div>`];break;case"reset":s=12}return"get"!=e[1]&&n.style.setProperty("--font-size",`${s}px`),localStorage.setItem("fontSize",s),t},theme:e=>{let t=[1,""];switch(e[1]){case"set":this.#e.theme.list.includes(e[2])?this.#e.theme.set(e[2]):t=[0,`Theme "${e[2]}" not found`];break;case"get":t=[1,`<div><span>Current theme: <span class="token comment">${localStorage.getItem("theme")}</span></span></div>`];break;case"reset":this.#e.theme.set("light");break;case"list":t=[1,`<div><span>Theme list: <span class="token comment">${this.#e.theme.list.join(", ")}</span></span><p>See <a href="https://github.com/ZhengLinLei/paste-code/blob/main/THEME.md">https://github.com/ZhengLinLei/paste-code/blob/main/THEME.md</a> to customise themes.</div>`]}return t}};getHistory(){return this.#t}}